import { getDatabase } from '../config/database.js';

export async function addDemoTasks() {
  const db = getDatabase();
  
  return new Promise((resolve, reject) => {
    console.log('üé≠ Adding demo tasks to database...');
    
    db.serialize(() => {
      // Check if demo tasks already exist
      db.get('SELECT COUNT(*) as count FROM programs', (err, row) => {
        if (err) {
          console.error('‚ùå Error checking existing programs:', err);
          reject(err);
          return;
        }
        
        if (row && row.count > 0) {
          console.log('‚úÖ Demo tasks already exist, skipping...');
          resolve();
          return;
        }
        
        console.log('üìù Creating demo tasks...');
        
        // Demo tasks with various statuses
        const demoTasks = [
          {
            task_id: 1001,
            work_year: 2024,
            required_quarter: '2024-03-01',
            title: '◊®◊õ◊© ◊û◊ó◊©◊ë◊ô◊ù ◊ó◊ì◊©◊ô◊ù',
            description: '◊®◊õ◊© 50 ◊û◊ó◊©◊ë◊ô◊ù ◊†◊ô◊ô◊ó◊ô◊ù ◊ú◊û◊©◊®◊ì◊ô ◊î◊ó◊ë◊®◊î',
            requester_name: '◊ì◊ï◊ì ◊õ◊î◊ü',
            division_name: '◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î',
            department_name: '◊û◊¢◊®◊õ◊ï◊™ ◊û◊ô◊ì◊¢',
            domain_name: '◊¶◊ô◊ï◊ì ◊û◊ó◊©◊ï◊ë',
            estimated_amount: 250000,
            currency: 'ILS',
            supplier_list: '◊ì◊ú, HP, ◊ú◊†◊ï◊ë◊ï',
            justification: '◊î◊ó◊ú◊§◊™ ◊¶◊ô◊ï◊ì ◊ô◊©◊ü ◊ï◊©◊ô◊§◊ï◊® ◊ë◊ô◊¶◊ï◊¢◊ô◊ù',
            planning_source: 'annual_planning',
            complexity: 2,
            status: 'Open',
            assigned_officer_name: '◊©◊®◊î ◊ú◊ï◊ô',
            team_name: '◊¶◊ï◊ï◊™ ◊û◊ó◊©◊ï◊ë',
            planning_notes: '◊ú◊ë◊ì◊ï◊ß ◊™◊ê◊ô◊û◊ï◊™ ◊¢◊ù ◊™◊ï◊õ◊†◊ï◊™ ◊ß◊ô◊ô◊û◊ï◊™',
            officer_notes: '◊ë◊™◊î◊ú◊ô◊ö ◊ê◊ô◊°◊ï◊£ ◊î◊¶◊¢◊ï◊™ ◊û◊ó◊ô◊®'
          },
          {
            task_id: 1002,
            work_year: 2024,
            required_quarter: '2024-06-01',
            title: '◊©◊ô◊®◊ï◊™◊ô ◊†◊ô◊ß◊ô◊ï◊ü ◊ú◊û◊©◊®◊ì◊ô◊ù',
            description: '◊ó◊ï◊ñ◊î ◊©◊†◊™◊ô ◊ú◊©◊ô◊®◊ï◊™◊ô ◊†◊ô◊ß◊ô◊ï◊ü',
            requester_name: '◊®◊ó◊ú ◊ê◊ë◊®◊î◊ù',
            division_name: '◊û◊©◊ê◊ë◊ô ◊ê◊†◊ï◊©',
            department_name: '◊™◊§◊¢◊ï◊ú',
            domain_name: '◊©◊ô◊®◊ï◊™◊ô◊ù',
            estimated_amount: 120000,
            currency: 'ILS',
            supplier_list: '◊ó◊ë◊®◊™ ◊†◊ô◊ß◊ô◊ï◊ü ◊ê, ◊ó◊ë◊®◊™ ◊†◊ô◊ß◊ô◊ï◊ü ◊ë',
            justification: '◊©◊û◊ô◊®◊î ◊¢◊ú ◊°◊ë◊ô◊ë◊™ ◊¢◊ë◊ï◊ì◊î ◊†◊ß◊ô◊ô◊î',
            planning_source: 'annual_planning',
            complexity: 1,
            status: 'Plan',
            assigned_officer_name: '◊ê◊ë◊ô ◊õ◊î◊ü',
            team_name: '◊¶◊ï◊ï◊™ ◊©◊ô◊®◊ï◊™◊ô◊ù',
            planning_notes: '◊ú◊ï◊ï◊ì◊ê ◊õ◊ô◊°◊ï◊ô ◊ú◊õ◊ú ◊î◊ß◊ï◊û◊ï◊™',
            officer_notes: '◊û◊ó◊õ◊î ◊ú◊ê◊ô◊©◊ï◊® ◊™◊ß◊¶◊ô◊ë'
          },
          {
            task_id: 1003,
            work_year: 2024,
            required_quarter: '2024-04-01',
            title: '◊§◊ô◊™◊ï◊ó ◊û◊¢◊®◊õ◊™ CRM',
            description: '◊§◊ô◊™◊ï◊ó ◊û◊¢◊®◊õ◊™ ◊†◊ô◊î◊ï◊ú ◊ú◊ß◊ï◊ó◊ï◊™ ◊û◊ï◊™◊ê◊û◊™',
            requester_name: '◊ô◊ï◊°◊ô ◊ú◊ï◊ô',
            division_name: '◊û◊õ◊ô◊®◊ï◊™',
            department_name: '◊©◊ô◊ï◊ï◊ß',
            domain_name: '◊§◊ô◊™◊ï◊ó ◊™◊ï◊õ◊†◊î',
            estimated_amount: 500000,
            currency: 'ILS',
            supplier_list: '◊ó◊ë◊®◊™ ◊§◊ô◊™◊ï◊ó ◊ê, ◊ó◊ë◊®◊™ ◊§◊ô◊™◊ï◊ó ◊ë',
            justification: '◊©◊ô◊§◊ï◊® ◊†◊ô◊î◊ï◊ú ◊ú◊ß◊ï◊ó◊ï◊™ ◊ï◊û◊õ◊ô◊®◊ï◊™',
            planning_source: 'unplanned',
            complexity: 3,
            status: 'In Progress',
            assigned_officer_name: '◊û◊ô◊®◊ô ◊ì◊ï◊ì',
            team_name: '◊¶◊ï◊ï◊™ ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô',
            planning_notes: '◊§◊®◊ï◊ô◊ß◊ò ◊ê◊°◊ò◊®◊ò◊í◊ô ◊ó◊©◊ï◊ë',
            officer_notes: '◊ë◊©◊ú◊ë ◊§◊ô◊™◊ï◊ó ◊®◊ê◊©◊ï◊†◊ô'
          },
          {
            task_id: 1004,
            work_year: 2024,
            required_quarter: '2024-02-01',
            title: '◊®◊ô◊î◊ï◊ò ◊û◊©◊®◊ì◊ô ◊ó◊ì◊©',
            description: '◊®◊õ◊© ◊©◊ï◊ú◊ó◊†◊ï◊™ ◊ï◊õ◊°◊ê◊ï◊™ ◊ú◊û◊©◊®◊ì ◊î◊ó◊ì◊©',
            requester_name: '◊†◊ï◊¢◊î ◊í◊®◊ô◊ü',
            division_name: '◊™◊§◊¢◊ï◊ú',
            department_name: '◊û◊™◊ß◊†◊ô◊ù',
            domain_name: '◊®◊ô◊î◊ï◊ò',
            estimated_amount: 80000,
            currency: 'ILS',
            supplier_list: '◊ê◊ô◊ß◊ê◊î, ◊õ◊™◊® ◊§◊ú◊°◊ò◊ô◊ß',
            justification: '◊î◊ß◊û◊™ ◊û◊©◊®◊ì ◊ó◊ì◊©',
            planning_source: 'carried_over',
            complexity: 1,
            status: 'Complete',
            assigned_officer_name: '◊ì◊†◊ô ◊®◊ï◊ñ◊ü',
            team_name: '◊¶◊ï◊ï◊™ ◊®◊õ◊© ◊õ◊ú◊ú◊ô',
            planning_notes: '◊ú◊ï◊ï◊ì◊ê ◊î◊™◊ê◊û◊î ◊ú◊¢◊ô◊¶◊ï◊ë ◊î◊û◊©◊®◊ì',
            officer_notes: '◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î, ◊î◊®◊ô◊î◊ï◊ò ◊î◊ï◊™◊ß◊ü'
          },
          {
            task_id: 1005,
            work_year: 2024,
            required_quarter: '2024-01-01',
            title: '◊©◊ì◊®◊ï◊í ◊û◊¢◊®◊õ◊™ ◊ê◊ë◊ò◊ó◊î',
            description: '◊î◊™◊ß◊†◊™ ◊û◊¶◊ú◊û◊ï◊™ ◊ê◊ë◊ò◊ó◊î ◊ó◊ì◊©◊ï◊™',
            requester_name: '◊ê◊û◊ô◊® ◊ë◊ü ◊ì◊ï◊ì',
            division_name: '◊ê◊ë◊ò◊ó◊î',
            department_name: '◊ê◊ë◊ò◊ó◊î ◊§◊ô◊ñ◊ô◊™',
            domain_name: '◊û◊¢◊®◊õ◊ï◊™ ◊ê◊ë◊ò◊ó◊î',
            estimated_amount: 150000,
            currency: 'ILS',
            supplier_list: '◊ó◊ë◊®◊™ ◊ê◊ë◊ò◊ó◊î ◊û◊™◊ß◊ì◊û◊™',
            justification: '◊©◊ô◊§◊ï◊® ◊®◊û◊™ ◊î◊ê◊ë◊ò◊ó◊î ◊ë◊û◊™◊ß◊ü',
            planning_source: 'annual_planning',
            complexity: 2,
            status: 'Done',
            assigned_officer_name: '◊™◊û◊® ◊õ◊î◊ü',
            team_name: '◊¶◊ï◊ï◊™ ◊ë◊ô◊ò◊ó◊ï◊ü',
            planning_notes: '◊§◊®◊ï◊ô◊ß◊ò ◊ß◊®◊ô◊ò◊ô ◊ú◊ê◊ë◊ò◊ó◊î',
            officer_notes: '◊î◊ï◊©◊ú◊ù ◊ï◊†◊û◊°◊® ◊ú◊™◊§◊¢◊ï◊ú'
          },
          {
            task_id: 1006,
            work_year: 2024,
            required_quarter: '2024-05-01',
            title: '◊®◊õ◊© ◊®◊õ◊ë◊ô ◊ó◊ë◊®◊î',
            description: '◊®◊õ◊© 5 ◊®◊õ◊ë◊ô ◊ó◊ë◊®◊î ◊ó◊ì◊©◊ô◊ù',
            requester_name: '◊í◊ô◊ú ◊©◊û◊ï◊ê◊ú',
            division_name: '◊™◊§◊¢◊ï◊ú',
            department_name: '◊¶◊ô ◊®◊õ◊ë',
            domain_name: '◊®◊õ◊ë◊ô◊ù',
            estimated_amount: 400000,
            currency: 'ILS',
            supplier_list: '◊ô◊ï◊†◊ì◊ê◊ô, ◊ò◊ï◊ô◊ï◊ò◊î, ◊†◊ô◊°◊ê◊ü',
            justification: '◊î◊ó◊ú◊§◊™ ◊®◊õ◊ë◊ô◊ù ◊ô◊©◊†◊ô◊ù',
            planning_source: 'annual_planning',
            complexity: 2,
            status: 'Freeze',
            assigned_officer_name: '◊®◊ï◊ü ◊ê◊ú◊ï◊ü',
            team_name: '◊¶◊ï◊ï◊™ ◊®◊õ◊© ◊õ◊ú◊ú◊ô',
            planning_notes: '◊ú◊ë◊ì◊ï◊ß ◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊ú◊ô◊°◊ô◊†◊í',
            officer_notes: '◊î◊ï◊ß◊§◊ê ◊¢◊ß◊ë ◊ó◊®◊ô◊í◊î ◊ë◊™◊ß◊¶◊ô◊ë'
          },
          {
            task_id: 1007,
            work_year: 2024,
            required_quarter: '2024-07-01',
            title: '◊©◊ô◊®◊ï◊™◊ô ◊ô◊ô◊¢◊ï◊• ◊û◊©◊§◊ò◊ô',
            description: '◊©◊ô◊®◊ï◊™◊ô ◊ô◊ô◊¢◊ï◊• ◊û◊©◊§◊ò◊ô ◊©◊†◊™◊ô◊ô◊ù',
            requester_name: '◊¢◊ì◊ô ◊®◊ï◊ñ◊†◊ë◊®◊í',
            division_name: '◊û◊©◊§◊ò◊ô',
            department_name: '◊ô◊ô◊¢◊ï◊• ◊û◊©◊§◊ò◊ô',
            domain_name: '◊©◊ô◊®◊ï◊™◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô◊ô◊ù',
            estimated_amount: 200000,
            currency: 'ILS',
            supplier_list: '◊û◊©◊®◊ì ◊¢◊ï◊®◊õ◊ô ◊ì◊ô◊ü ◊ê, ◊û◊©◊®◊ì ◊¢◊ï◊®◊õ◊ô ◊ì◊ô◊ü ◊ë',
            justification: '◊ô◊ô◊¢◊ï◊• ◊û◊©◊§◊ò◊ô ◊©◊ï◊ò◊£',
            planning_source: 'unplanned',
            complexity: 2,
            status: 'Cancel',
            assigned_officer_name: '◊ú◊ô◊ú◊ö ◊û◊ï◊®',
            team_name: '◊¶◊ï◊ï◊™ ◊©◊ô◊®◊ï◊™◊ô◊ù',
            planning_notes: '◊ú◊ë◊ì◊ï◊ß ◊ó◊ú◊ï◊§◊ï◊™ ◊§◊†◊ô◊û◊ô◊ï◊™',
            officer_notes: '◊ë◊ï◊ò◊ú - ◊†◊û◊¶◊ê ◊§◊™◊®◊ï◊ü ◊§◊†◊ô◊û◊ô'
          },
          {
            task_id: 1008,
            work_year: 2024,
            required_quarter: '2024-08-01',
            title: '◊©◊ì◊®◊ï◊í ◊™◊©◊™◊ô◊™ ◊®◊©◊™',
            description: '◊©◊ì◊®◊ï◊í ◊û◊™◊í◊ô ◊®◊©◊™ ◊ï◊†◊™◊ë◊ô◊ù',
            requester_name: '◊ê◊ú◊ï◊ü ◊ò◊ú',
            division_name: '◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î',
            department_name: '◊™◊©◊™◊ô◊ï◊™',
            domain_name: '◊™◊ß◊©◊ï◊®◊™',
            estimated_amount: 180000,
            currency: 'ILS',
            supplier_list: '◊°◊ô◊°◊ß◊ï, HP, ◊í\'◊ï◊†◊ô◊§◊®',
            justification: '◊©◊ô◊§◊ï◊® ◊û◊î◊ô◊®◊ï◊™ ◊ï◊ô◊¶◊ô◊ë◊ï◊™ ◊î◊®◊©◊™',
            planning_source: 'annual_planning',
            complexity: 3,
            status: 'In Progress',
            assigned_officer_name: '◊ô◊¢◊ú ◊ë◊®◊ß',
            team_name: '◊¶◊ï◊ï◊™ ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô',
            planning_notes: '◊ú◊™◊ê◊ù ◊¢◊ù ◊¶◊ï◊ï◊™ IT',
            officer_notes: '◊ë◊™◊î◊ú◊ô◊ö ◊î◊™◊ß◊†◊î'
          }
        ];
        
        let tasksCreated = 0;
        demoTasks.forEach((task, index) => {
          db.run(
            `INSERT INTO programs 
             (task_id, work_year, required_quarter, title, description, requester_name, 
              division_name, department_name, domain_name, estimated_amount, currency, 
              supplier_list, justification, planning_source, complexity, status, 
              assigned_officer_name, team_name, planning_notes, officer_notes) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              task.task_id, task.work_year, task.required_quarter, task.title, 
              task.description, task.requester_name, task.division_name, 
              task.department_name, task.domain_name, task.estimated_amount, 
              task.currency, task.supplier_list, task.justification, 
              task.planning_source, task.complexity, task.status, 
              task.assigned_officer_name, task.team_name, task.planning_notes, 
              task.officer_notes
            ],
            function(err) {
              if (err) {
                console.error('‚ùå Error creating demo task:', task.task_id, err);
                reject(err);
                return;
              }
              
              console.log('‚úÖ Created demo task:', task.task_id, '-', task.title);
              
              tasksCreated++;
              if (tasksCreated === demoTasks.length) {
                console.log('‚úÖ All demo tasks created successfully!');
                console.log(`üìä Created ${tasksCreated} demo tasks with various statuses`);
                resolve();
              }
            }
          );
        });
      });
    });
  });
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  addDemoTasks()
    .then(() => {
      console.log('‚úÖ Demo tasks added successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Failed to add demo tasks:', error);
      process.exit(1);
    });
}